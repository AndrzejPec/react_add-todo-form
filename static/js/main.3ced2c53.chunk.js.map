{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/todos.ts","api/users.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","completed","title","TodoList","todos","map","userId","username","mapTodosWithUsers","todosFromServer","usersFromServer","find","mappedUser","App","useState","setTodos","setTitle","setUserId","titleError","setTitleError","userError","setUserError","onSubmit","event","preventDefault","largestId","Math","max","u","newTodo","type","value","onChange","target","placeholder","Number","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ced2c53.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types';\n\ntype UserInfoProps = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<UserInfoProps> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import React from 'react';\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport { Todo } from '../../types';\n\ntype TodoInfoProps = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<TodoInfoProps> = ({\n  todo,\n}) => {\n  return (\n    <article key={todo.id} data-id={todo.id} className={`TodoInfo ${todo.completed ? 'TodoInfo--completed' : ''}`}>\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n      {todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\nimport { Todo } from '../../types';\n\ntype TodoListProps = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { Todo, User } from './types';\nimport todosFromServer from './api/todos';\nimport usersFromServer from './api/users';\n\nconst mapTodosWithUsers = (): Todo[] => {\n  return todosFromServer.map((todo) => {\n    const user = usersFromServer\n      .find((mappedUser) => mappedUser.id === todo.userId);\n\n    return {\n      ...todo,\n      user,\n    };\n  });\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>(mapTodosWithUsers);\n  const [title, setTitle] = useState<string>('');\n  const [userId, setUserId] = useState<number | null>(null);\n  const [titleError, setTitleError] = useState<boolean>(false);\n  const [userError, setUserError] = useState<boolean>(false);\n\n  const addTodo = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!title || !userId) {\n      setTitleError(!title);\n      setUserError(!userId);\n\n      return;\n    }\n\n    const largestId = Math.max(...todos.map((todo) => todo.id));\n\n    const user = usersFromServer.find((u) => u.id === userId);\n\n    const newTodo: Todo = {\n      id: largestId + 1,\n      title,\n      userId,\n      user,\n      completed: false,\n    };\n\n    setTodos([...todos, newTodo]);\n    setTitle('');\n    setUserId(null);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form onSubmit={addTodo}>\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={title}\n            onChange={(event) => {\n              setTitleError(false);\n              setTitle(event.target.value);\n            }}\n            placeholder=\"Add todo\"\n          />\n          {titleError && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={userId || ''}\n            onChange={(event) => {\n              setUserError(false);\n              setUserId(Number(event.target.value));\n            }}\n          >\n            <option value=\"\" disabled>Choose a user</option>\n            {usersFromServer.map((user: User) => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {userError && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <section className=\"TodoList\">\n        <TodoList todos={todos} />\n      </section>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}